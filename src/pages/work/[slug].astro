---
import { contentfulClient } from "../../lib/contentful";
import { documentToHtmlString } from "@contentful/rich-text-html-renderer";
import { documentToPlainTextString } from "@contentful/rich-text-plain-text-renderer";
import type { work } from "../../lib/contentful";
import Layout from "../../layouts/Layout.astro";
import Header from "../../components/Header.astro";
import Footer from "../../components/Footer.astro";
import { format } from "date-fns";
import { es } from "date-fns/locale";

interface BlogProps {
  title: string;
  slug: string;
  content: any;
  date: string;
  headerImg: any;
  category: string;
  readTime: string;
  author: string;
  authorImage?: any;
  tags: string[];
  relatedPosts: RelatedPost[] | null;
}

interface RelatedPost {
  params: {
    slug: string;
  };
  props: BlogProps;
}

export async function getStaticPaths() {
  const { items } = await contentfulClient.getEntries<work>({
    content_type: "blogTars",
  });
  
  const pages = items.map((item) => ({
    params: { slug: item.fields.slug },
    props: {
      title: item.fields.title,
      slug: item.fields.slug,
      content: item.fields.content,
      date: item.fields.date,
      headerImg: item.fields.headerImg,
      category: item.fields.category || "Noticias",
      readTime: item.fields.readTime || "5",
      author: item.fields.author || "Equipo TARS",
      authorImage: item.fields.authorImage,
      tags: item.fields.tags || [],
      relatedPosts: null, // Will be populated below
    } as BlogProps,
  }));

  // Add related posts to each page
  for (let page of pages) {
    const pageTags = page.props.tags || [];
    
    const relatedPosts = pages
      .filter((p) => p.params.slug !== page.params.slug) // Filter out current post
      .filter(
        (p) => {
          const postTags = p.props.tags || [];
          return postTags.some((tag) => pageTags.includes(tag));
        }
      ) // Match by tags
      .sort(() => Math.random() - 0.5) // Randomize selection
      .slice(0, 3); // Take up to 3 related posts

    page.props.relatedPosts =
      relatedPosts.length > 0
        ? relatedPosts
        : pages
            .filter((p) => p.params.slug !== page.params.slug)
            .sort(() => Math.random() - 0.5)
            .slice(0, 3); // If no tag matches, take random posts
  }

  return pages;
}

const {
  content,
  title,
  // Keep slug, even though it's not directly used, to match the interface
  slug,
  date,
  headerImg,
  category,
  readTime: initialReadTime,
  author,
  authorImage,
  tags = [], // Default to empty array
  relatedPosts,
} = Astro.props;

let options = {
  renderNode: {
    "embedded-asset-block": (node: any) => {
      const file = node.data.target.fields?.file;
      if (!file || !file.contentType) {
        return `<p class="flex flex-row items-center gap-3 font-[MGNHumble]"><svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="w-10 h-10"> <path d="M3 3h16v2H5v14h14v2H3V3zm18 0h-2v18h2V3zM11 15h2v2h-2v-2zm2-8h-2v6h2V7z" fill="currentColor"/> </svg> Unsupported asset type</p>`;
      }
      const mimeType = file.contentType;
      const url = file.url;
      if (mimeType.startsWith("image/")) {
        return `<figure class="my-8 rounded-xl overflow-hidden">
                  <img class="w-full object-cover fadeInScale" src="${url}" alt="${node.data.target.fields.title || "Image"}"/>
                  ${
                    node.data.target.fields.description
                      ? `<figcaption class="text-sm text-center text-gray-400 mt-2 italic">${node.data.target.fields.description}</figcaption>`
                      : ""
                  }
                </figure>`;
      } else if (mimeType.startsWith("video/")) {
        return `<div class="my-8 rounded-xl overflow-hidden">
                  <video class="w-full fadeInScale" autoplay loop muted controls>
                    <source src="${url}" type="${mimeType}">
                    Your browser does not support the video tag.
                  </video>
                </div>`;
      } else if (mimeType === "application/pdf") {
        return `<div class="my-8 rounded-xl overflow-hidden">
                  <embed src="${url}" type="application/pdf" width="100%" height="600px" class="fadeInScale" />
                </div>`;
      } else {
        return `<a href="${url}" target="_blank" class="pixel-corners mb-3 border border-white/20 bg-white/5 hover:bg-white/10 hover:text-white text-white flex flex-col items-center justify-between relative"><p class="p-3 w-full flex flex-row items-center justify-between relative" style="margin-bottom:0;"><span class="flex flex-row items-center gap-3"><svg class="w-6 relative" fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"> <path d="M21 22H3V2h12v2h2v2h2v2h2v14zM17 6h-2v2h2V6zM5 4v16h14V10h-6V4H5zm8 12H7v2h6v-2zm-6-4h10v2H7v-2zm4-4H7v2h4V8z" fill="currentColor"/> </svg> ${node.data.target.fields.title}</span> <svg class="w-6" fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"> <path d="M4 11v2h12v2h2v-2h2v-2h-2V9h-2v2H4zm10-4h2v2h-2V7zm0 0h-2V5h2v2zm0 10h2v-2h-2v2zm0 0h-2v2h2v-2z" fill="currentColor"/> </svg></p></a>`;
      }
    },
  },
};

let parsedSEOContent = documentToPlainTextString(content);
if (parsedSEOContent.length > 60) {
  parsedSEOContent = parsedSEOContent.slice(0, 160) + "...";
}
let bodyHTML = content ? documentToHtmlString(content, options) : "";

function parseLocalizedContent(html: string) {
  const regex =
    /<p>&lt;begin-localization=&quot;(.*?)&quot;&gt;<\/p>(.*?)<p>&lt;end-localization=&quot;\1&quot;&gt;<\/p>/gs;
  let match: RegExpExecArray | null;
  const localizedContent: { lang: string; content: string }[] = [];
  while ((match = regex.exec(html)) !== null) {
    localizedContent.push({
      lang: match[1],
      content: match[2].trim(),
    });
  }
  return localizedContent;
}

function parseFloatTags(html: string) {
  const embedRegex =
    /<p>&lt;embed(.*?)&gt;<\/p>(.*?)<p>&lt;end-embed&gt;<\/p>/gs;
  const floatRegex =
    /<p>&lt;float(.*?)&gt;<\/p>(.*?)<p>&lt;end-float&gt;<\/p>/gs;
  const floatLeftRegex =
    /<p>&lt;float-left(.*?)&gt;<\/p>(.*?)<p>&lt;end-float-left&gt;<\/p>/gs;
  const floatRightRegex =
    /<p>&lt;float-right(.*?)&gt;<\/p>(.*?)<p>&lt;end-float-right&gt;<\/p>/gs;
  let match: RegExpExecArray | null;
  let floatHTML = html;
  while ((match = floatRegex.exec(html)) !== null) {
    const styleMatch = match[1].match(/style=&quot;(.*?)&quot;/);
    const style = styleMatch
      ? `style="${styleMatch[1]} display:flex; justify-content:space-between; background-color:var(--bg-color); box-shadow: 0 0 0 100vmax var(--bg-color); clip-path: inset(0 -100vmax);"`
      : 'style="display:flex; justify-content:space-between;"';
    let content = match[2];
    const hasFloats =
      floatLeftRegex.test(content) || floatRightRegex.test(content);
    if (hasFloats) {
      const processedContent = content
        .replace(
          floatLeftRegex,
          (_m: string, s: string, c: string) =>
            `<div class="float float-left" ${s.replace(/&quot;/g, "")}">${c}</div>`
        )
        .replace(
          floatRightRegex,
          (_m: string, s: string, c: string) =>
            `<div class="float float-right" ${s.replace(/&quot;/g, "")}">${c}</div>`
        );
      floatHTML = floatHTML.replace(
        match[0],
        `<div class="float-container" ${style}>${processedContent}</div>`
      );
    } else {
      floatHTML = floatHTML.replace(
        match[0],
        `<div class="float-container" ${style}>${content}</div>`
      );
    }
  }
  while ((match = embedRegex.exec(html)) !== null) {
    const styleMatch = match[1].match(/style=&quot;(.*?)&quot;/);
    const style = styleMatch
      ? `style="${styleMatch[1]} aspect-ratio: 16/10;"`
      : 'style="aspect-ratio: 16/10;"';
    let content = match[2];
    content = content.replace(/<\/?p>/g, ""); // Remove surrounding <p> tags
    floatHTML = floatHTML.replace(
      match[0],
      `<iframe class="w-full" title="Embed Content" ${style} src="${content}"></iframe>`
    );
  }
  return floatHTML;
}

function parseCenterTags(html: string) {
  const centerRegex = /<p>&lt;center&gt;<\/p>(.*?)<p>&lt;end-center&gt;<\/p>/gs;
  let match: RegExpExecArray | null;
  let centerHTML = html;
  while ((match = centerRegex.exec(html)) !== null) {
    centerHTML = centerHTML.replace(
      match[0],
      `<div class="center">${match[1]}</div>`
    );
  }
  return centerHTML;
}

const localizedContentArray = parseLocalizedContent(bodyHTML);
const defaultLanguage = "es";
const currentLanguage = "es";
const localizedContent = localizedContentArray.find(
  (item) => item.lang === currentLanguage
);
const defaultContent = localizedContentArray.find(
  (item) => item.lang === defaultLanguage
);
bodyHTML = localizedContent?.content || defaultContent?.content || bodyHTML;
bodyHTML = parseFloatTags(bodyHTML);
bodyHTML = parseCenterTags(bodyHTML);

// Use let for readTime since we'll modify it
let readTime = initialReadTime;
if (!readTime && parsedSEOContent) {
  const wordsPerMinute = 225;
  const words = parsedSEOContent.trim().split(/\s+/).length;
  const minutes = Math.ceil(words / wordsPerMinute);
  readTime = `${minutes} min de lectura`;
}
---

<Layout title={`${title} | TARS Innovación y excelencia en robótica competitiva`} description={parsedSEOContent} image={(headerImg as any)?.fields?.file?.url} />
  <Header isWork />

  <div class="w-full relative overflow-hidden">
    {
      headerImg && (
        <div
          class="w-full h-[75vh] bg-fixed bg-no-repeat bg-cover relative"
          style={`background-image: linear-gradient(180deg, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0.5) 100%), url('${
            (headerImg as any)?.fields?.file?.url
          }')`}
        >
          <div class="absolute inset-0 bg-gradient-to-b from-black/80 to-transparent" />

          <div class="container mx-auto h-full flex flex-col items-center justify-center px-4 relative z-10">
            <div class="absolute top-6 left-6 md:top-10 md:left-10 mt-10">
              <button
                onclick="window.history.back()"
                class="group flex items-center space-x-2 text-white opacity-60 hover:opacity-100 transition-all"
              >
                <img
                  src="https://unpkg.com/pixelarticons@1.8.1/svg/arrow-left.svg"
                  alt="Arrow left"
                  class="w-6 h-6 invert transition-transform duration-300 group-hover:-translate-x-1"
                />
                <span>Volver</span>
              </button>
            </div>

            <div class="w-full max-w-4xl text-center">
              <div class="inline-block px-4 py-1 rounded-full bg-gradient-to-r from-orange-500 to-red-500 text-white text-sm font-medium mb-6">
                {category}
              </div>

              <h1
                class="text-4xl md:text-6xl lg:text-7xl font-bold text-white mb-6 leading-tight"
                transition:name={`work-title-${title}`}
              >
                {title}
              </h1>

              <div class="flex flex-wrap items-center justify-center gap-4 text-white/80">
                <div class="flex items-center space-x-2">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class="w-5 h-5"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"
                    />
                  </svg>
                  <span>{format(date, "d 'de' MMMM, yyyy", { locale: es })}</span>
                </div>

                <div class="w-1 h-1 rounded-full bg-white/50" />

                <div class="flex items-center space-x-2">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class="w-5 h-5"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"
                    />
                  </svg>
                  <span>{readTime} min</span>
                </div>

                {author && (
                  <>
                    <div class="w-1 h-1 rounded-full bg-white/50" />

                    <div class="flex items-center space-x-2">
                      {authorImage && "fields" in authorImage ? (
                        <img
                          src={authorImage.fields.file.url}
                          alt={author}
                          class="w-6 h-6 rounded-full object-cover"
                        />
                      ) : (
                        <svg
                          xmlns="http://www.w3.org/2000/svg"
                          class="w-5 h-5"
                          fill="none"
                          viewBox="0 0 24 24"
                          stroke="currentColor"
                        >
                          <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"
                          />
                        </svg>
                      )}
                      <span>{author}</span>
                    </div>
                  </>
                )}
              </div>
            </div>
          </div>
        </div>
      )
    }
  </div>

  <main class="bg-black">
    <div class="container mx-auto px-4 py-12">
      <div class="grid grid-cols-12 gap-8">
        <aside class="hidden lg:block col-span-3 sticky top-16 self-start">
          <div class="bg-[#181818] rounded-xl p-6 border border-zinc-800/30">
            <div class="mb-6">
              <h3 class="text-white text-lg font-bold mb-4">Contenido</h3>
              <div class="table-of-contents text-gray-300"></div>
            </div>

            {
              tags && tags.length > 0 && (
                <div class="mb-6 pt-6 border-t border-zinc-800/50">
                  <h3 class="text-white text-lg font-bold mb-4">Etiquetas</h3>
                  <div class="flex flex-wrap gap-2">
                    {tags.map((tag: string) => (
                      <span class="inline-block px-3 py-1 rounded-md bg-[#2B2B2B] text-sm text-gray-300">
                        {tag}
                      </span>
                    ))}
                  </div>
                </div>
              )
            }

            <div class="pt-6 border-t border-zinc-800/50">
              <h3 class="text-white text-lg font-bold mb-4">Compartir</h3>
                            <div class="flex space-x-3">
                <a
                  href={`https://twitter.com/intent/tweet?text=${encodeURIComponent(
                    title
                  )}&url=${encodeURIComponent(Astro.url.href)}`}
                  target="_blank"
                  class="w-10 h-10 flex items-center justify-center rounded-full bg-[#2B2B2B] hover:bg-blue-500 text-white transition-colors"
                >
                  <img src="/img/twitter.svg" alt="Twitter" class="w-5 h-5 invert" />
                </a>
                <a
                  href={`https://www.instagram.com/?url=${encodeURIComponent(
                    Astro.url.href
                  )}`}
                  target="_blank"
                  class="w-10 h-10 flex items-center justify-center rounded-full bg-[#2B2B2B] hover:bg-pink-600 text-white transition-colors"
                >
                  <img src="/img/instagram.svg" alt="Instagram" class="w-5 h-5 invert" />
                </a>
                <a
                  href={`https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(
                    Astro.url.href
                  )}`}
                  target="_blank"
                  class="w-10 h-10 flex items-center justify-center rounded-full bg-[#2B2B2B] hover:bg-blue-700 text-white transition-colors"
                >
                  <img src="/img/linkedin.svg" alt="LinkedIn" class="w-5 h-5 invert" />
                </a>
                <button
                  class="w-10 h-10 flex items-center justify-center rounded-full bg-[#2B2B2B] hover:bg-purple-600 text-white transition-colors copy-link-btn"
                  onclick="copyToClipboard()"
                >
                  <img 
                    src="https://unpkg.com/pixelarticons@1.8.1/svg/copy.svg"
                    alt="Arrow right"
                    class="w-6 h-6 invert ml-1 transition-transform duration-300 group-hover:translate-x-1"
                  />
                </button>
              </div>
            </div>
          </div>
        </aside>

        <article class="col-span-12 lg:col-span-9">
          <div
            class="bg-[#181818] rounded-xl overflow-hidden border border-zinc-800/30"
          >
            <div class="p-4 sm:p-8 md:p-12 article-content text-white">
              <div class="prose prose-lg prose-invert max-w-none fadeInScale">
                <div set:html={bodyHTML} />
              </div>
            </div>
          </div>

          <div class="lg:hidden mt-8">
            {
              tags && tags.length > 0 && (
                <div class="bg-[#181818] rounded-xl p-6 border border-zinc-800/30">
                  <h3 class="text-white text-lg font-bold mb-4">Etiquetas</h3>
                  <div class="flex flex-wrap gap-2">
                    {tags.map((tag: string) => (
                      <span class="inline-block px-3 py-1 rounded-md bg-[#2B2B2B] text-sm text-gray-300">
                        {tag}
                      </span>
                    ))}
                  </div>
                </div>
              )
            }
          </div>

          <div class="lg:hidden mt-8">
            <div class="bg-[#181818] rounded-xl p-6 border border-zinc-800/30">
              <h3 class="text-white text-lg font-bold mb-4">Compartir</h3>
              <div class="flex flex-col gap-3">
                <a
                  href={`https://twitter.com/intent/tweet?text=${encodeURIComponent(
                    title
                  )}&url=${encodeURIComponent(Astro.url.href)}`}
                  target="_blank"
                  class="flex-1 py-2 flex items-center justify-center rounded-md bg-[#2B2B2B] hover:bg-blue-500 text-white transition-colors"
                >
                  <img 
                    src="/img/twitter.svg" 
                    alt="Twitter" 
                    class="w-5 h-5 mr-2 invert"
                  />
                  Twitter
                </a>
                <a
                  href={`https://www.instagram.com/?url=${encodeURIComponent(
                    Astro.url.href
                  )}`}
                  target="_blank"
                  class="flex-1 py-2 flex items-center justify-center rounded-md bg-[#2B2B2B] hover:bg-pink-600 text-white transition-colors"
                >
                  <img 
                    src="/img/instagram.svg" 
                    alt="Instagram" 
                    class="w-5 h-5 mr-2 invert"
                  />
                  Instagram
                </a>
                <a
                  href={`https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(
                    Astro.url.href
                  )}`}
                  target="_blank"
                  class="flex-1 py-2 flex items-center justify-center rounded-md bg-[#2B2B2B] hover:bg-blue-700 text-white transition-colors"
                >
                  <img 
                    src="/img/linkedin.svg" 
                    alt="LinkedIn" 
                    class="w-5 h-5 mr-2 invert"
                  />
                  LinkedIn
                </a>
              </div>
            </div>
          </div>
        </article>
      </div>

      {
        relatedPosts && relatedPosts.length > 0 && (
          <div class="mt-16">
            <h2 class="text-2xl md:text-3xl font-bold text-white mb-8">
              Artículos relacionados
            </h2>
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {relatedPosts.map((post: RelatedPost) => (
                <a
                  href={`/work/${post.params.slug}`}
                  class="group bg-[#181818] rounded-xl overflow-hidden border border-zinc-800/30 hover:-translate-y-1 transition-transform duration-300"
                >
                  {post.props.headerImg && "fields" in post.props.headerImg && (
                    <div class="h-48 overflow-hidden">
                      <img
                        src={post.props.headerImg.fields.file.url}
                        alt={post.props.title}
                        class="w-full h-full object-cover transition-transform duration-500 group-hover:scale-105"
                      />
                    </div>
                  )}
                  <div class="p-6">
                    <div class="text-gray-400 text-sm mb-2">
                      {post.props.date && post.props.date.length > 0
                        ? format(
                            new Date(post.props.date),
                            "d 'de' MMMM, yyyy",
                            { locale: es }
                          )
                        : ""}{" "}
                      · {post.props.readTime} min
                    </div>
                    <h3 class="text-xl font-bold text-white mb-2 group-hover:text-blue-500 transition-colors line-clamp-2">
                      {post.props.title}
                    </h3>
                    <p class="text-gray-300 text-sm line-clamp-3">
                      {documentToPlainTextString(post.props.content).slice(
                        0,
                        120
                      ) + "..."}
                    </p>
                    <div class="mt-4 pt-4 border-t border-zinc-800/50 flex justify-between items-center">
                      <span class="text-sm text-white opacity-60 hover:opacity-100 font-medium group-hover:translate-x-1 inline-flex items-center transition-all">
                        Leer más
                        <img
                          src="https://unpkg.com/pixelarticons@1.8.1/svg/arrow-right.svg"
                          alt="Arrow right"
                          class="w-6 h-6 invert ml-1 transition-transform duration-300 group-hover:translate-x-1"
                        />
                      </span>
                      {post.props.category && (
                        <span class="text-xs px-2 py-1 rounded bg-[#2B2B2B] text-gray-300">
                          {post.props.category}
                        </span>
                      )}
                    </div>
                  </div>
                </a>
              ))}
            </div>
          </div>
        )
      }
    </div>
  </main>

  <Footer />
</Layout>

<script is:inline>
  document.addEventListener("astro:page-load", () => {
    const videos = document.querySelectorAll("video");
    videos.forEach((video) => {
      video.load();
    });

    const articleContent = document.querySelector(".article-content");
    if (articleContent) {
      const headings = Array.from(articleContent.querySelectorAll("h2, h3"));
      const tableOfContents = document.querySelector(".table-of-contents");

      if (tableOfContents && headings.length > 0) {
        const list = document.createElement("ul");
        list.className = "space-y-2";

        headings.forEach((heading, index) => {
          if (!heading.id) {
            heading.id = `heading-${index}`;
          }

          const item = document.createElement("li");
          const link = document.createElement("a");
          link.href = `#${heading.id}`;
          link.textContent = heading.textContent;
          link.className =
            heading.tagName === "H2"
              ? "block text-sm hover:text-orange-500 transition-colors"
              : "block text-sm pl-4 text-gray-400 hover:text-orange-500 transition-colors";

          link.addEventListener("click", (e) => {
            e.preventDefault();
            heading.scrollIntoView({ behavior: "smooth" });

            history.pushState(null, null, link.href);
          });

          item.appendChild(link);
          list.appendChild(item);
        });

        tableOfContents.appendChild(list);
      }
    }

    const copyButtons = document.querySelectorAll(".copy-link-btn");
    copyButtons.forEach((button) => {
      button.addEventListener("click", () => {
        const url = button.getAttribute("data-url");
        navigator.clipboard.writeText(url).then(() => {
          const originalHTML = button.innerHTML;
          button.innerHTML = `<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path></svg>`;
          button.classList.add("bg-green-600");

          setTimeout(() => {
            button.innerHTML = originalHTML;
            button.classList.remove("bg-green-600");
          }, 2000);
        });
      });
    });

    const observeHeadings = () => {
      const headings = Array.from(
        document.querySelectorAll(".article-content h2, .article-content h3")
      );
      if (!headings.length) return;

      const tocLinks = document.querySelectorAll(".table-of-contents a");
      if (!tocLinks.length) return;

      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              const id = entry.target.id;
              const correspondingLink = document.querySelector(
                `.table-of-contents a[href="#${id}"]`
              );

              tocLinks.forEach((link) => {
                link.classList.remove("text-orange-500", "font-medium");
              });

              if (correspondingLink) {
                correspondingLink.classList.add(
                  "text-orange-500",
                  "font-medium"
                );
              }
            }
          });
        },
        { threshold: 0.3, rootMargin: "-100px 0px -66% 0px" }
      );

      headings.forEach((heading) => {
        observer.observe(heading);
      });
    };

    setTimeout(observeHeadings, 500);
  });

  function copyToClipboard() {
    const url = window.location.href;
    navigator.clipboard.writeText(url).then(() => {
      alert("URL copiada al portapapeles");
    });
  }
</script>

<style is:global>
  hr {
    border-width: 3px !important;
    opacity: 0.2 !important;
  }

  .expand {
    animation: auto linear expand both;
    animation-timeline: view();
    animation-range: exit;
  }

  @keyframes expand {
    0% {
      opacity: 1;
      transform: translate(0, 0);
      filter: grayscale(0) blur(0);
    }
    100% {
      opacity: 0;
      transform: translate(0, 100px);
      filter: grayscale(1) blur(5px);
    }
  }

  .float-container {
    gap: 18px;
    margin-top: 38px;
    padding-top: 28px;
    padding-bottom: 28px;
  }

  .float p {
    margin: 0 !important;
  }

  .prose h1,
  .prose h2,
  .prose h3,
  .prose h4 {
    font-family: "InstrumentSans", system-ui, sans-serif;
    font-weight: 700;
    color: white;
    position: relative;
  }

  .prose h2 {
    font-size: 2rem;
    margin-top: 2.5rem;
    margin-bottom: 1.25rem;
    padding-bottom: 0.5rem;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
  }

  .prose h2::before {
    content: "";
    position: absolute;
    left: 0;
    bottom: -1px;
    width: 50px;
    height: 3px;
    background: linear-gradient(to right, #ff4500, #ff7f50);
    border-radius: 2px;
  }

  .prose h3 {
    font-size: 1.5rem;
    margin-top: 2rem;
    margin-bottom: 1rem;
  }

  .prose h4 {
    font-size: 1.25rem;
    margin-top: 1.5rem;
    margin-bottom: 0.75rem;
  }

  .prose p {
    line-height: 1.75;
    margin-bottom: 1.5rem;
    color: rgba(255, 255, 255, 0.8);
  }

  .prose strong {
    color: white;
    font-weight: 600;
  }

  .prose ul,
  .prose ol {
    margin-top: 1rem;
    margin-bottom: 1rem;
    padding-left: 1.5rem;
  }

  .prose ul li,
  .prose ol li {
    margin-bottom: 0.5rem;
    padding-left: 0.5rem;
  }

  .prose a {
    color: #ff4500;
    text-decoration: none;
    transition: color 0.2s;
    font-weight: 500;
  }

  .prose a:hover {
    color: #ff7f50;
    text-decoration: underline;
  }

  .prose blockquote {
    border-left: 4px solid #ff4500;
    padding-left: 1rem;
    margin-left: 0;
    margin-right: 0;
    font-style: italic;
    color: rgba(255, 255, 255, 0.7);
  }

  .prose code {
    background: rgba(255, 255, 255, 0.1);
    padding: 0.2rem 0.4rem;
    border-radius: 0.25rem;
    font-family: "Source Code Pro", monospace;
    font-size: 0.9em;
  }

  .prose pre {
    background: #1e1e1e;
    border-radius: 0.5rem;
    padding: 1rem;
    overflow-x: auto;
    margin: 1.5rem 0;
    border: 1px solid rgba(255, 255, 255, 0.1);
  }

  .prose pre code {
    background: transparent;
    padding: 0;
    color: rgba(255, 255, 255, 0.9);
  }

  .prose img {
    border-radius: 0.5rem;
    overflow: hidden;
  }

  .prose table {
    width: 100%;
    border-collapse: collapse;
    margin: 2rem 0;
  }

  .prose thead {
    background: rgba(255, 255, 255, 0.05);
    border-bottom: 2px solid rgba(255, 255, 255, 0.1);
  }

  .prose th {
    padding: 0.75rem 1rem;
    text-align: left;
    font-weight: 600;
    color: white;
  }

  .prose td {
    padding: 0.75rem 1rem;
    border-bottom: 1px solid rgba(255, 255, 255, 0.05);
  }

  .prose tr:last-child td {
    border-bottom: none;
  }

  .fadeInScale {
    animation: auto linear fadeInScale both;
    animation-timeline: view();
    animation-range: entry 25% cover 50%;
  }

  @keyframes fadeInScale {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @media (max-width: 768px) {
    .float-container {
      display: flex;
      flex-direction: column !important;
    }

    .prose h2 {
      font-size: 1.75rem;
    }

    .prose h3 {
      font-size: 1.4rem;
    }
  }
</style>